# Fortnite weapon types and rarities data
WEAPON_TYPES = ["AR", "Shotgun", "SMG", "Sniper", "Heals"]

RARITIES = [
    "None",
    "Grey (Common)",
    "Green (Uncommon)", 
    "Blue (Rare)", 
    "Purple (Epic)", 
    "Gold (Legendary)"
]

# Scores for each rarity
RARITY_SCORES = {
    "None": 0,
    "Grey (Common)": 20,
    "Green (Uncommon)": 40,
    "Blue (Rare)": 60,
    "Purple (Epic)": 80,
    "Gold (Legendary)": 100
}

# Simplified rarity names for color mapping
RARITY_COLORS = {
    "None": "gray",
    "Grey (Common)": "gray",
    "Green (Uncommon)": "green", 
    "Blue (Rare)": "blue", 
    "Purple (Epic)": "violet", 
    "Gold (Legendary)": "orange"
}

def get_rarity_color(rarity):
    """Return the color associated with a rarity."""
    return RARITY_COLORS.get(rarity, "gray")

def calculate_loadout_score(loadout):
    """
    Calculate the overall loadout score based on weapon rarities.
    
    Args:
        loadout (dict): Dictionary mapping weapon types to rarities
        
    Returns:
        int: Overall score percentage (0-100)
    """
    if not loadout:
        return 0
    
    total_score = sum(RARITY_SCORES[rarity] for rarity in loadout.values())
    return round(total_score / len(loadout))

def get_loadout_description(loadout):
    """
    Generate a human-readable description of the loadout.
    
    Args:
        loadout (dict): Dictionary mapping weapon types to rarities
        
    Returns:
        str: Text description of the loadout
    """
    description = []
    
    for weapon_type, rarity in loadout.items():
        if rarity != "None":
            description.append(f"{rarity} {weapon_type}")
        else:
            description.append(f"No {weapon_type}")
    
    return ", ".join(description)

def get_rarity_tier(rarity):
    """
    Convert rarity string to a numerical tier (0-5).
    
    Args:
        rarity (str): Rarity string
        
    Returns:
        int: Numerical tier (0 for None, 5 for Legendary)
    """
    rarity_tiers = {
        "None": 0,
        "Grey (Common)": 1,
        "Green (Uncommon)": 2, 
        "Blue (Rare)": 3, 
        "Purple (Epic)": 4, 
        "Gold (Legendary)": 5
    }
    
    return rarity_tiers.get(rarity, 0)
